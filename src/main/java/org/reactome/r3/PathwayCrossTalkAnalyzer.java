/*
 * Created on Feb 7, 2008
 *
 */
package org.reactome.r3;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.gk.model.GKInstance;
import org.junit.Test;
import org.reactome.data.ReactomeAnalyzer;
import org.reactome.r3.util.FileNameManager;
import org.reactome.r3.util.FileUtility;
import org.reactome.r3.util.InteractionUtilities;
import org.reactome.r3.util.R3Constants;

/**
 * This class is used to analyze cross talk data generated by Xin. The functions of this class
 * should be merged with Xin's class that is used to create these raw files. However, since the code
 * has not be synchronized, I have to create this small class for the time being.
 * @author wgm
 *
 */
public class PathwayCrossTalkAnalyzer {
    private final int TOTAL_SIMULATION_NUMBER = 10000;
    private final String PREDICATED_FI_FILE_NAME = R3Constants.RESULT_DIR + "FI73_Predicated_042108.txt";
    
    public PathwayCrossTalkAnalyzer() {
    }
    
    @Test
    public void correctPValue() throws IOException {
        FileUtility fu = new FileUtility();
        String fileName = R3Constants.RESULT_DIR + "PathwayCrossTalk_P_Values_All_021508.txt";
        fu.setInput(fileName);
        String line = null;
        String outputFileName = R3Constants.RESULT_DIR + "PathwayCrossTalk_P_Values_All_021508_right.txt";
        FileUtility outputFu = new FileUtility();
        outputFu.setOutput(outputFileName);
        while ((line = fu.readLine()) != null) {
            String[] tokens = line.split("\t");
            outputFu.printLine(tokens[0] + "\t" + 
                               tokens[1] + "\t" + 
                               (1.0 - Double.parseDouble(tokens[2])));
        }
        fu.close();
        outputFu.close();
    }
    
    /**
     * This method is used to caculate P values for pathway cross talk based on permutation.
     * @throws Exception
     */
    @Test
    public void calculateCrossTalkPValue() throws Exception{
        FileUtility fu = new FileUtility();
        //System.out.println("Running....10000..BIG15...all...  in linux");
        ReactomeAnalyzer ra = new ReactomeAnalyzer();
        Map<GKInstance, Set<String>> topicIDMap = ra.grepIDsFromTopics();
        //String intFileName = R3Constants.INTERACTION_FILE_NAME;
        String intFileName = PREDICATED_FI_FILE_NAME;
        //String intFileName = R3Constants.RESULT_DIR + "FIInteractions73_021108_PPI.txt";
        Set<String> interactionSet = fu.loadInteractions(intFileName);
        double globalRatio = getGlobalRatio(intFileName);
        Set<String> totalIds = InteractionUtilities.grepIDsFromInteractions(interactionSet);
        List<GKInstance> topicList = new ArrayList<GKInstance>(topicIDMap.keySet());
        // This method is used to filter out pathways contains ids less than 15 proteins
        for (Iterator<GKInstance> it = topicList.iterator(); it.hasNext();) {
            Set<String> ids = topicIDMap.get(it.next());
            if (ids.size() < 15)
                it.remove();
        }
        // Sort topics based on name
        Collections.sort(topicList, new Comparator<GKInstance>() {
           public int compare(GKInstance obj1,
                              GKInstance obj2) {
               String name1 = obj1.getDisplayName();
               String name2 = obj2.getDisplayName();
               return name1.compareTo(name2);
           }
        });
        Map<String,Double> p_valuePathwayMap = new HashMap<String,Double>();
        int pathwaySetSize = topicList.size();
        List<RowData> rowDataList = new ArrayList<RowData>();
        for (int i = 0; i < topicList.size() - 1; i++) {
            GKInstance topic1 = topicList.get(i);
            //System.out.println("Starting pathway: " + topic1.getDisplayName());
            Set<String> idSet1 = topicIDMap.get(topic1);
            for (int j = i + 1; j < topicList.size(); j++) {
                GKInstance topic2 = topicList.get(j);
                RowData data = new RowData();
                rowDataList.add(data);
                data.pair = topic1.getDisplayName() + " - " + topic2.getDisplayName();
                Set<String> idSet2 = topicIDMap.get(topic2);
                //Guanming's method
                double crossTalkValue = calculateCrossTalkVaue(idSet1, 
                                                               idSet2, 
                                                               interactionSet);
                if ((crossTalkValue + "").equals("NaN")) {
                    continue;
                }
                data.localValue = crossTalkValue;
                if (data.localValue == 0.0d)
                    continue;
                data.score = Math.log(crossTalkValue / globalRatio);
                if (data.score < 0.0)
                    continue; // No need to calculate p-value, score is too small
                //Now calculate the p-value
                int pCount = 0;
                for(int k = 0; k < TOTAL_SIMULATION_NUMBER; k++) {
                    // Permute noOfSimulation times
                    Set<String> path1RandomIdSet = generateRandomIdSet(idSet1.size(), totalIds);// SHOULD USE ALL NODES
                    Set<String> path2RandomIdSet = generateRandomIdSet(idSet2.size(), totalIds);// should use all nodes
                    double randomCrossTalkValue = calculateCrossTalkVaue(path1RandomIdSet, 
                                                                         path2RandomIdSet,
                                                                         interactionSet);
                    // At least as extreme as the observed event.--the definition of p-value
                    if(crossTalkValue <= randomCrossTalkValue)
                        pCount++;
                }
                data.pValue = (double)pCount/TOTAL_SIMULATION_NUMBER;
            }
        }
        // Sort the values
        Collections.sort(rowDataList, new Comparator<RowData>() {
            public int compare(RowData value1, RowData value2) {
                Double localValue1 = value1.localValue;
                if (localValue1 == null)
                    localValue1 = -1.0;
                Double localValue2 = value2.localValue;
                if (localValue2 == null)
                    localValue2 = -1.0;
                return localValue2.compareTo(localValue1);
            }
        });
        //String outputFileName = R3Constants.RESULT_DIR + "PathwayCrossTalk_P_Values_All_021508.txt";
        //String outputFileName = R3Constants.RESULT_DIR + "PathwayCrossTalk_P_Values_PPI_021908.txt";
        //String outputFileName = R3Constants.RESULT_DIR + "PathwayCrossTalk_P_Values_All_042208.txt";
        String outputFileName = R3Constants.RESULT_DIR + "PathwayCrossTalk_P_Values_PREDICATED_042208.txt";
        fu.setOutput(outputFileName);
        StringBuilder builder = new StringBuilder();
        fu.printLine("Pathway_Pair\tLocal Ratio\tScore\tP_value");
        for (RowData data : rowDataList) {
            builder.setLength(0);
            builder.append(data.pair).append("\t");
            if (data.localValue == null) {
                fu.printLine(builder.toString());
                continue;
            }
            builder.append(data.localValue).append("\t");
            if (data.score == null) {
                fu.printLine(builder.toString());
                continue;
            }
            builder.append(data.score).append("\t");
            if (data.pValue != null) {
                if (data.pValue == 0)
                    builder.append("<0.0001");
                else
                    builder.append(data.pValue).append("\t");
            }
            fu.printLine(builder.toString());
        }
        fu.close();
    }

    private Set<String> generateRandomIdSet(int size, Set<String> ids) {
        Set<String> rtnIdSet = new HashSet<String>();
        List<String> idList = new ArrayList<String>(ids);
        int index = 0;
        int total = idList.size(); 
        while (rtnIdSet.size() < size) {
            index = (int)(Math.random() * total);
            rtnIdSet.add(idList.get(index));
        }
        return rtnIdSet;
    }
    
    private double calculateCrossTalkVaue(Set<String> idSet1,
                                          Set<String> idSet2,
                                          Set<String> interactionSet) {
        int possibleCrossTalkCount = 0;
        int crossTalkCount = 0;
        Set<String> shared = new HashSet<String>(idSet1);
        shared.retainAll(idSet2);
        Set<String> idSet1Copy = new HashSet<String>(idSet1);
        Set<String> idSet2Copy = new HashSet<String>(idSet2);
        idSet1Copy.removeAll(shared);
        idSet2Copy.removeAll(shared);
        for(String id1 : idSet1Copy){
            for(String id2 : idSet2Copy){
//                if(( idSet2.contains(idSet1)) || idSet1.contains(id2)){
//                    //We need to exclude the shared interactions
//                    continue;
//                }
                possibleCrossTalkCount ++;
                int compare = id1.compareTo(id2);
                String tmpInt = null;
                if (compare < 0)
                    tmpInt = id1 + " " + id2;
                else
                    tmpInt = id2 + " " + id1;
                if (interactionSet.contains(tmpInt))
                    crossTalkCount ++;
            }
        }
        return (double)crossTalkCount / possibleCrossTalkCount;
    }
    
    /**
     * This method is used to calculate the ratio of FIs to all possible pairs.
     * @throws IOException
     */
    @Test
    public void checkGlobalRatio() throws IOException {
        String[] fileNames = new String[] {
                R3Constants.INTERACTION_FILE_NAME, // For all FIs
                R3Constants.RESULT_DIR + "FIInteractions73_021108_PPI.txt" // For predicated FIs only
        };
        FileUtility fu = new FileUtility();
        for (String intFileName : fileNames) {
            System.out.println("File Name: " + intFileName);
            Set<String> interactions = fu.loadInteractions(intFileName);
            Set<String> ids = InteractionUtilities.grepIDsFromInteractions(interactions);
            // Don't care about splice isoforms
            int totalPairs = ids.size() * (ids.size() - 1) / 2;
            System.out.println("Total interactions: " + interactions.size());
            System.out.println("Total possible pairs: " + totalPairs);
            System.out.println("Ratio: " + (double)(interactions.size()) / totalPairs);
        }
    }
    
    private double getGlobalRatio(String intFileName) throws IOException {
        FileUtility fu = new FileUtility();
        Set<String> interactions = fu.loadInteractions(intFileName);
        Set<String> ids = InteractionUtilities.grepIDsFromInteractions(interactions);
        // Don't care about splice isoforms
        int totalPairs = ids.size() * (ids.size() - 1) / 2;
        return ((double)(interactions.size()) / totalPairs);
    }
    
    private Map<String, Double> loadPairToValue(String fileName) throws IOException {
        FileUtility fu = new FileUtility();
        fu.setInput(fileName);
        String line = fu.readLine(); 
        // First line holding the pathway names
        String[] names = line.split("\t");
        final Map<String, Double> pairToValue = new HashMap<String, Double>();
        int c = 0;
        while ((line = fu.readLine()) != null) {
            String[] tokens = line.split("\t");
            // The first is pathway name
            for (int i = 0; i < c; i++) {
                    pairToValue.put(tokens[0] + " - " + names[i + 1],
                                    Double.valueOf(tokens[i + 1]));
            }
            c++;
        }
        fu.close();
        return pairToValue;
    }
    
    /**
     * Sort the results based on pathway crosstalk scores.
     * @throws IOException
     */
    @Test
    public void sortLocalValueList() throws IOException {
        String inFileName = R3Constants.RESULT_DIR + "PathwayCrossTalk_P_Values_All_021508.txt";
        String outFileName = R3Constants.RESULT_DIR + "PathwayCrossTalk_P_Values_All_021508_Sorted.txt";
        FileUtility inFu = new FileUtility();
        inFu.setInput(inFileName);
        FileUtility outFu = new FileUtility();
        outFu.setOutput(outFileName);
        List<RowData> rowData = new ArrayList<RowData>();
        String line = null;
        while ((line = inFu.readLine()) != null) {
            String[] tokens = line.split("\t");
            RowData data = new RowData();
            data.pair = tokens[0];
            data.localValue = Double.valueOf(tokens[1]);
            data.pValue = Double.valueOf(tokens[2]);
            rowData.add(data);
        }
        inFu.close();
        Collections.sort(rowData, new Comparator<RowData>() {
            public int compare(RowData data1, RowData data2) {
                return data2.localValue.compareTo(data1.localValue);
            }
        });
        double globaleRatio = getGlobalRatio(R3Constants.INTERACTION_FILE_NAME);
        System.out.println("GlobalRatio: " + globaleRatio);
        // Output
        for (RowData data : rowData) {
            outFu.printLine(data.pair + "\t" + 
                            data.localValue + "\t" +
                            Math.log(data.localValue / globaleRatio) + "\t" +
                            data.pValue);
        }
        outFu.close();
    }
    
    @Test
    public void generateSortedLocalValueList() throws IOException {
        //String fileName = FileNameManager.getManager().getFileName("localRatio_upperTriangle_BIG15ALL");
        //String fileName = FileNameManager.getManager().getFileName("localRatio_upperTriangle_BIG15FI");
        String fileName = R3Constants.RESULT_DIR + "localRatio_upperTriangle_BIG15_All_021508_1.txt";
        final Map<String, Double> pairToValue = loadPairToValue(fileName);
        System.out.println("Total Size: " + pairToValue.size());
        String pValueFileName = FileNameManager.getManager().getFileName("crossPathwayTalk_localRatioPValue_ourmethod_10000_big15_linux_ALL");
        //String pValueFileName = FileNameManager.getManager().getFileName("crossPathwayTalk_localRatioPValue_ourmethod_10000_big15_linux_FI");
        Map<String, Double> pairToPValue = loadPairToValue(pValueFileName);
        System.out.println("Total Size of pvalue: " + pairToPValue.size());
        // Sort the values
        List<String> pairs = new ArrayList<String>(pairToValue.keySet());
        Collections.sort(pairs, new Comparator<String>() {
            public int compare(String pair1, String pair2) {
                Double value1 = pairToValue.get(pair1);
                Double value2 = pairToValue.get(pair2);
                return -value1.compareTo(value2);
            }
        });
        for (String pair : pairs) {
            Double value = pairToValue.get(pair);
            Double pValue = pairToPValue.get(pair);
            System.out.println(pair + "\t" + value + "\t" + pValue);
        }
    }
    
    private class RowData {
        String pair;
        Double localValue;
        Double score;
        Double pValue;
    }
}
